[original docs]
itadm_tpgs [comstar_tpg]
itadm_targets [comstar_target]
stmf_luns [comstar_lun]
stmf_hgs [comstar_hostgroup]
(*) stmf_tgs [comstar_targetgroup]     not yet implemented
zpool_properties
zpool_status
    -> zpool_properties [zpool]
zvol_properties [zvol]
cfgadm_disks [harddisk]

[merged docs]
comstar_tpg
(*) comstar_targetgroup             not yet implemented
    -> (??)
comstar_target
    -> comstar_tpg (tpg_of)
        * itadm_targets._.tpg == itadm_tpgs.id  (tpg id matches) (1)
        * sourceid == sourceid   (on the same machine)
comstar_lun
    -> comstar_hostgroup (hostgroup_of)
        * stmf_hgs.id IN comstar_lun._.views.*.host_group (host group a property in the views) (2)
        * sourceid == sourceid   (on the same machine)
    -> zvol (zvol_of)
        * comstar_lun._.data_file ends with zvol.id (3)
        OR
        * LSTRIP('/dev/zvol/rdsk/', comstar_lun._.data_file) == zvol.id (4)
        AND
        * sourceid == sourceid   (on the same machine)
    -> comstar_target (target_of)  method #1 through target group membership
        * comstar_targetgroup.id IN comstar_lun._.views.*.target_group (target group a property in the views)
        * sourceid == sourceid   (on the same machine)
    -> comstar_target (target_of)  method #2
        * sourceid == sourceid   (on the same machine)
        * comstar_lun._.views.*._target_group == [] (5)
comstar_hostgroup
zvol
    -> zpool (zpool_of)
        * sourceid == sourceid   (on the same machine)
        * SPLIT(zvol.id, '/', 1)[0] == zpool.id
disk
    -> zpool (disk_of)
        * sourceid == sourceid   (on the same machine)
        * harddisk.id IN zpool._.vdevs[*].disks[*].name (6)
        OR
        * harddisk.id IN zpool._.disks[*].name
zpool

[discussion]
(1) simplest free variable case- two values must match identically
(2) a complex free variable case- there is a complicated json path, and one of them has to be in the other
(3) a custom comparator needs to be used with a free variable as input
(4) pre-computed value derived from free variable is equal to another
(5) simpleish case without free variables involved- one document has to have a certain value in it (along a complex json path)
(6) same as the one where one value has to be in the other, but more complicated because they could be nested (in this case maybe not nested in arbitrary ways, but maybe something else could be)


[options for expressing]

> by writing code:
    free variables: JsonPathMatchFact('sourceid', JsonPathMatchFact.OP_ANY_EQUALS, 'zpool', name='zpool-source'),
                                         ^ some json path         ^                 ^             ^ the name that you use when referring to this 'fact'
                                                                  |                 \ the specified value
                                                                  \ an operator which says anything along the path can equal the specified value

    necessary conditions: JsonPathExtractFact('_.id', JsonPathExtractFact.OP_EXTRACT_FIRST, name='generic-id'),
                                               ^ json path  ^                                     ^  the name you use when referring to this free variable
                                                            \ operator which gets all the values at the path

    relation: Relation('zpool_of', ('zpool-type', '',), ('zvol-type', 'generic-id',), relationalcriteria=(ItemGetterRelationalCriterion(RelationalCriterion.OP_S_IN_P, 1, 1),) ),
                         ^ relation name   ^              ^ S, or successor facts       ^ the way relational facts are compared   ^      ^ the operator (which does 'X in Y'), for the P[1] and S[1]
                                           \ P, or predecessor, facts by names                                                    \ one of N criteria which, if true, will mean the two things are related


> by writing in a json-based DSL:

* simple free variable case
zpool                     zvol
{                         {
  "sourceid": x,            "sourceid": x,
  "_": {                    "_": {
    "id": y                   "zpool": y,
  }                         }
}                         }


* some unknown key in between (this is not quite how the document is structured)
comstar_lun               comstar_hostgroup
{                         {
  "_": {                    "_": {
    "views": {                "id": x
      *: {                  }
        "name": x         }
      }
    }
  }
}


* free variable must be in a sequence
vm                        hypervisor
{                         {
  "_": {                    "_": {
    "id": x                   "vms": [x]
  }                         }
}                         }


> by writing in a DSL which contains jsonpaths:

    WITH
    x in zpool:*,
    y in zvol:*
    JOIN ON
    x.sourceid == y.sourceid,
    x._.id == y._.zpool

and that dsl could contain references to methods (transforms) in some call table provided (as an argument or by decoration):

    WITH
    x in comstar_tpg:*,
    y in iscsi_initiator:*
    JOIN ON
    strip_port_number(x._.portals) == strip_domain_name(y.target_portal)


and maybe methods for mangling the documents:

   WITH
   flatten_disks(x) in zpool:*,
   y in harddisk:*
   JOIN ON
   y._.id IN x.disks,
   x.sourceid == y.sourceid
